<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.lagou.dao.RoleMapper">

    <!--查询所有角色-->
    <select id="findAllRole" parameterType="com.lagou.domain.Role" resultType="com.lagou.domain.Role">

        select * from roles
        <where>
            <if test="name != null and name != '' ">
                and name = #{name}
            </if>
        </where>

    </select>

    <!--新增角色 public void saveRole(Role role);-->
    <insert id="saveRole" parameterType="com.lagou.domain.Role">
        insert into roles (id,code,name,description,created_time,updated_time,created_by,updated_by)
        values (null,#{code},#{name},#{description},#{createdTime},#{updatedTime},#{createdBy},#{updatedBy})
    </insert>

    <!--通过id查询角色  public Role findRoleById(int id);-->
    <select id="findRoleById" parameterType="int" resultType="com.lagou.domain.Role">
        select * from roles where id = #{id}
    </select>

    <!--修改角色信息 public void updateRole(Role role);-->
    <update id="updateRole" parameterType="com.lagou.domain.Role">
        update roles set code = #{code},name = #{name},description = #{description},updated_time = #{updatedTime},
        updated_by = #{updatedBy} where id = #{id}
    </update>

    <!-- 根据角色ID查询关联的菜单信息ID public List<Integer> findMenuByRoleId(Integer roleId);-->
    <select id="findMenuByRoleId" resultType="int" parameterType="int">
        SELECT m.id
            FROM roles r INNER JOIN role_menu_relation rm ON r.id = rm.role_id
	                     INNER JOIN menu m ON m.id = rm.menu_id WHERE r.id =#{id}
    </select>

    <!--根据roleId删除在中间表与菜单的关联关系-->
    <delete id="deleteRoleContextMenu" parameterType="int">
        delete  from role_menu_relation where role_id = #{rid}
    </delete>

    <!--为角色分配菜单-->
    <insert id="roleContextMenu" parameterType="com.lagou.domain.Role_menu_relation">
        insert into role_menu_relation values(null,#{menuId},#{roleId},#{createdTime},#{updatedTime},#{createdBy},#{updatedby})
    </insert>

    <!--删除角色     public void deleteRole(Integer roleId);-->
    <delete id="deleteRole" parameterType="int">
        delete from roles where id = #{roleId}
    </delete>

    <!--根据角色id查询角色拥有的资源信息 public List<Resource> findResourceIdByRoleId(Integer id);-->
    <select id="findResourceByRoleId" resultType="com.lagou.domain.Resource" parameterType="int">
        select r.* from role_resource_relation rrr inner join resource r on
        rrr.resource_id = r.id  and rrr.role_id = #{id}
    </select>

    <!-- 查询该角色拥有的资源分类信息 public List<ResourceCategory> findResourceCategoryByRoleId(Integer roleId);-->
    <select id="findResourceCategoryByRoleId" resultType="com.lagou.domain.ResourceCategory" parameterType="int">
        select distinct rc.*
        from resource_category rc
                 inner join resource r on r.category_id = rc.id
                 inner join role_resource_relation rrr on r.id = rrr.resource_id
                 inner join roles r2 on rrr.role_id = r2.id
        where r2.id = #{id}
    </select>

    <!--根据角色ID 删除角色与资源的关联关系 public void deleteResourceByRoleId(Integer roleId);-->
    <delete id="deleteResourceByRoleId" parameterType="int">
        delete from role_resource_relation where role_id = #{roleId}
    </delete>

    <!--为角色分配资源  public void saveResourceToRoleId(RoleResourceRelation roleResourceRelation);-->
    <insert id="saveResourceToRoleId" parameterType="com.lagou.domain.RoleResourceRelation">
          insert into role_resource_relation
          values (null, #{resourceId}, #{roleId}, #{createdTime}, #{updatedTime}, #{createdBy}, #{updatedBy})
    </insert>


</mapper>